dates:
  start_date:
    short: sd
    long: start-date
    help: The start date (mm-dd or yyyy-mm-dd for predictions)
    kwargs:
      default: 01-01
  end_date:
    short: ed
    long: end-date
    help: The end date (mm-dd or yyyy-mm-dd for predictions)
    kwargs:
      default: 01-01

shared_image:
  gain:
    short: ''
    long: gain
    help: The image gain, or scale, factor
    kwargs:
      default: 1e-4
      type: '&float'
  offset:
    short: ''
    long: offset
    help: The image offset to add to the scaling
    kwargs:
      default: 0.0
      type: '&float'
  resampling:
    short: rm
    long: resampling
    help: The resampling method
    kwargs:
      default: nearest
  append_ts:
    short: ''
    long: append-ts
    help: Whether to append time_series_vars to the image path
    kwargs:
      default: 'y'
      choices: ['y', 'n']
  date_format:
    short: ''
    long: image-date-format
    help: The image file date format
    kwargs:
      default: '%Y%j'
  skip_index:
    short: ''
    long: skip-index
    help: A skip index to slice time series lists by
    kwargs:
      default: 0
      type: '&int'

shared_create:
  num_workers:
    short: 'n'
    long: num-workers
    help: The number of CPUs for data creation
    kwargs:
      default: 4
      type: '&int'
  ref_res:
    short: r
    long: res
    help: The cell resolution
    kwargs:
      default: 10.0
      type: '&float'
  feature_pattern:
    short: ''
    long: feature-pattern
    help: The feature path pattern
    kwargs:
      default: '{region}/brdf_ts/ms/{image_vi}'
  zero_padding:
    short: ''
    long: zero-padding
    help: Zero padding to apply
    kwargs:
      default: 0
      type: '&int'
  instance_seg:
    short: ''
    long: instance-seg
    help: Whether to create a dataset for instance segmentation
    kwargs:
      action: store_true
  add_year:
    short: ''
    long: add-year
    help: The number of years to add to the year column to derive the end year
    kwargs:
      default: 0
      type: '&int'

create:
  grid_size:
    short: gs
    long: grid-size
    help: >
      The grid size (*If not given, grid size is taken from the the grid vector.
      If given, grid size is taken from the upper left coordinate of the grid vector.)
    kwargs:
      default: !!null
      nargs: '+'
      type: '&int'
  destination:
    short: ''
    long: destination
    help: The data destination
    kwargs:
      default: train
      choices: ['train', 'test', 'predict']
  crop_column:
    short: ''
    long: crop-column
    help: The crop column name in the polygon vector files
    kwargs:
      default: class
  keep_crop_classes:
    short: ''
    long: keep-crop-classes
    help: Whether to keep the crop classes as they are (True) or recode all non-zero classes to crop (False)
    kwargs:
      action: store_true
  max_crop_class:
    short: ''
    long: max-crop-class
    help: The maximum expected crop class value
    kwargs:
      type: '&int'
  replace_dict:
    short: ''
    long: replace-dict
    help: Crop class recodings (e.g., "61:0 141:0")
  bbox_offsets:
    short: ''
    long: bbox_offsets
    help: Additional grid bounding box offsets (e.g., 0,0 1000,0)
  nonag_is_unknown:
    short: ''
    long: nonag-is-unknown
    help: Whether the non-agricultural background is unknown
    kwargs:
      action: store_true
  all_touched:
    short: ''
    long: all-touched
    help: Whether to 'burn in' all pixels touched by geometries or only pixels whose center is within the polygon
    kwargs:
      action: store_true

create_predict:
  window_size:
    short: w
    long: window-size
    help: The processing windows size at which to apply inference
    kwargs:
      default: 100
      type: '&int'
  padding:
    short: ''
    long: padding
    help: The read padding around the window (padding is sliced off before writing)
    kwargs:
      default: 101
      type: '&int'
  time_series_path:
    short: ''
    long: ts-path
    help: A path with time series data (overrides the config regions)

train_predict:
  model_type:
    short: ''
    long: model-type
    help: The model type
    kwargs:
      default: 'TowerUNet'
      choices:
        - 'UNet3Psi'
        - 'ResUNet3Psi'
        - 'TowerUNet'
  activation_type:
    short: ''
    long: activation-type
    help: The activation to use
    kwargs:
      default: 'SiLU'
  res_block_type:
    short: rb
    long: res-block-type
    help: The residual block type (only relevant when --model-type=ResUNet3Psi)
    kwargs:
      default: 'resa'
      choices: ['res', 'resa']
  dropout:
    short: ''
    long: dropout
    help: The dropout probability
    kwargs:
      default: 0.2
      type: '&float'
  dilations:
    short: ''
    long: dilations
    help: The dilations to use
    kwargs:
      default: [1, 2]
      nargs: '+'
      type: '&int'
  attention_weights:
    short: ''
    long: attention-weights
    help: The attention weights
    kwargs:
      default: !!null
      choices: ['fractal', 'natten', 'spatial_channel']
  hidden_channels:
    short: ''
    long: hidden-channels
    help: The number of input hidden channels
    kwargs:
      default: 64
      type: '&int'
  device:
    short: ''
    long: device
    help: The device to train on
    kwargs:
      default: gpu
      choices: ['cpu', 'gpu']
  devices:
    short: ''
    long: devices
    help: The number of GPU devices to use (Note that if --device=cpu then --devices becomes 0)
    kwargs:
      type: '&int'
      default: 1
  processes:
    short: ''
    long: processes
    help: The number of concurrent processes for loading data
    kwargs:
      default: 1
      type: '&int'
  batch_size:
    short: ''
    long: batch-size
    help: The batch size
    kwargs:
      default: 4
      type: '&int'
  load_batch_workers:
    short: ''
    long: load-batch-workers
    help: The number of parallel batches to load
    kwargs:
      default: 0
      type: '&int'
  precision:
    short: ''
    long: precision
    help: The model data precision
    kwargs:
      default: '16-mixed'
  num_classes:
    short: ''
    long: num-classes
    help: The number of classes (overrides file info)
    kwargs:
      default: !!null
      type: '&int'
  strategy:
    short: ''
    long: strategy
    help: The model distribution strategy
    kwargs:
      default: 'ddp'
      choices: ['ddp', 'ddp_spawn', 'fsdp', 'ddp_find_unused_parameters_true']

shared_partitions:
  spatial_partitions:
    short: ''
    long: spatial-partitions
    help: The spatial partitions for spatial k-fold cross-validation or regional training
    kwargs:
      default: 'yes'
  partition_column:
    short: ''
    long: partition-column
    help: The partition column name
  partition_name:
    short: ''
    long: partition-name
    help: A partition name query used as "{partition_column} == 'partition_name'"

skfoldcv:
  splits:
    short: ''
    long: splits
    help: The number of quadrant splits (Only applies if the partition file is not passed).
    kwargs:
      default: 0
      type: '&int'

train:
  val_frac:
    short: ''
    long: val-frac
    help: The validation fraction
    kwargs:
      default: 0.2
      type: '&float'
  augment_prob:
    short: ''
    long: augment-prob
    help: The augmentation probability
    kwargs:
      default: 0.5
      type: '&float'
  random_seed:
    short: ''
    long: random-seed
    help: The random seed
    kwargs:
      default: 42
      type: '&int'
  epochs:
    short: ''
    long: epochs
    help: The number of training epochs
    kwargs:
      default: 100
      type: '&int'
  threads:
    short: t
    long: threads
    help: The number of threads per process worker
    kwargs:
      default: 1
      type: '&int'
  reset_model:
    short: ''
    long: reset-model
    help: Whether to reset the model
    kwargs:
      action: store_true
  expected_time:
    short: ''
    long: expected-time
    help: The expected time dimension of the training data
    kwargs:
      default: !!null
      type: '&int'
  expected_height:
    short: ''
    long: expected-height
    help: The expected height (rows) of the training data
    kwargs:
      default: 100
      type: '&int'
  expected_width:
    short: ''
    long: expected-width
    help: The expected width (columns) of the training data
    kwargs:
      default: 100
      type: '&int'
  delete_mismatches:
    short: ''
    long: delete-mismatches
    help: Whether to delete .pt data with dimensions that do not match the reference
    kwargs:
      action: store_true
  recalc_zscores:
    short: ''
    long: recalc-zscores
    help: Whether to re-calculate z-scores if they exist
    kwargs:
      action: store_true
  dim_color:
    short: ''
    long: dim-color
    help: The progress bar color for dimension checks
    kwargs:
      default: '#ffffff'
  mean_color:
    short: ''
    long: mean-color
    help: The progress bar color for means
    kwargs:
      default: '#ffffff'
  sse_color:
    short: ''
    long: sse-color
    help: The progress bar color for sum of squared errors
    kwargs:
      default: '#ffffff'
  auto_lr_find:
    short: ''
    long: lr-find
    help: Whether to tune the learning rate
    kwargs:
      action: store_true
  gradient_clip_val:
    short: gcv
    long: gradient-clip-val
    help: The gradient clip value
    kwargs:
      default: 1.0
      type: '&float'
  gradient_clip_algorithm:
    short: gca
    long: gradient-clip-algorithm
    help: The gradient clip algorithm
    kwargs:
      default: 'norm'
  optimizer:
    short: ''
    long: optimizer
    help: The optimizer
    kwargs:
      default: 'AdamW'
      choices:
        - 'AdamW'
        - 'SGD'
  deep_supervision:
    short: ''
    long: deep-sup
    help: Whether to use deep supervision
    kwargs:
      action: store_true
  pool_by_max:
    short: ''
    long: pool-by-max
    help: Whether to apply max pooling before convolution (otherwise, use strided convolution)
    kwargs:
      action: store_true
  pool_attention:
    short: ''
    long: pool-attention
    help: Whether to apply attention along the backbone pooling layers
    kwargs:
      action: store_true
  repeat_resa_kernel:
    short: ''
    long: repeat-resa-kernel
    help: Whether to repeat the input res-a kernel (otherwise, the first kernel is always 1x1)
    kwargs:
      action: store_true
  batchnorm_first:
    short: ''
    long: batchnorm-first
    help: Whether to apply BN->Act->Conv, otherwise Conv->BN->Act
    kwargs:
      action: store_true
  loss_name:
    short: l
    long: loss-name
    help: The loss method name
    kwargs:
      default: 'TanimotoComplementLoss'
      choices: ['TanimotoDistLoss', 'TanimotoComplementLoss']
  learning_rate:
    short: lr
    long: learning-rate
    help: The learning rate
    kwargs:
      default: 0.01
      type: '&float'
  lr_scheduler:
    short: lrs
    long: lr-scheduler
    help: The learning rate scheduler
    kwargs:
      default: 'OneCycleLR'
      choices:
        - 'CosineAnnealingLR'
        - 'ExponentialLR'
        - 'OneCycleLR'
        - 'StepLR'
  steplr_step_size:
    short: ''
    long: steplr-step-size
    help: The multiplicative step size factor (for --lr-scheduler=StepLR)
    kwargs:
      default: 5
      type: '&int'
  scale_pos_weight:
    short: ''
    long: scale-pos-weight
    help: Whether to balance class weights
    kwargs:
      action: store_true
  weight_decay:
    short: ''
    long: weight-decay
    help: Sets the weight decay for Adam optimizer\'s regularization
    kwargs:
      default: 1e-3
      type: '&float'
  accumulate_grad_batches:
    short: agb
    long: accumulate-grad-batches
    help: Sets the number of batches to apply gradients after
    kwargs:
      default: 1
      type: '&int'
  stochastic_weight_averaging:
    short: swa
    long: stochastic-weight-averaging
    help: Whether to use stochastic weight averaging
    kwargs:
      action: store_true
  stochastic_weight_averaging_lr:
    short: ''
    long: swa-lr
    help: The stochastic weight averaging learning rate
    kwargs:
      default: 0.05
      type: '&float'
  stochastic_weight_averaging_start:
    short: ''
    long: swa-start
    help: The stochastic weight averaging epoch start
    kwargs:
      default: 0.8
      type: '&float'
  model_pruning:
    short: ''
    long: model-pruning
    help: A fraction to prune the model by
    kwargs:
      default: 0
      type: '&float'
  profiler:
    short: ''
    long: profiler
    help: A profiler to level
    kwargs:
      default: !!null
      choices:
        - !!null
        - simple
        - advanced
  edge_class:
    short: ''
    long: edge-class
    help: The edge class value (overrides file info)
    kwargs:
      default: !!null
      type: '&int'
  save_batch_val_metrics:
    short: ''
    long: save-batch-val-metrics
    help: Whether to save batch validation metrics
    kwargs:
      action: store_true
  skip_train:
    short: ''
    long: skip-train
    help: Whether to skip training
    kwargs:
      action: store_true
  finetune:
    short: ''
    long: finetune
    help: Layers to finetune (if None, do feature extraction)
    kwargs:
      default: !!null
      choices:
        - all
        - fc

predict:
  out_path:
    short: 'o'
    long: out-path
    help: The output raster path and filename to be created
  data_path:
    short: 'd'
    long: data-path
    help: |
      A data path with PyTorch .pt files to predict on
      (if given, overrides --grid-id, --window-size, --padding, --gain, --offset, --append-ts)
  region:
    short: ''
    long: region
    help: A region name to search .pt files by (only needed if --data-path is not None)
  reference_image:
    short: ''
    long: ref-image
    help: A reference image to get geo-information from (only needed if --data-path is not None)
  grid_id:
    short: g
    long: grid-id
    help: The grid id to process (the grid id should be a sub-directory of --project-path)
  window_size:
    short: 'w'
    long: window-size
    help: The processing windows size at which to apply inference
    kwargs:
      default: 100
      type: '&int'
  padding:
    short: ''
    long: padding
    help: The read padding around the window (padding is sliced off before writing)
    kwargs:
      default: 101
      type: '&int'
  mode:
    short: ''
    long: mode
    help: The file open mode
    kwargs:
      default: w
      choices: ['w', 'r+']
  preload_data:
    short: ''
    long: preload-data
    help: Whether to preload the full image data into memory
    kwargs:
      action: store_true
  compression:
    short: ''
    long: compression
    help: The compression algorithm to use
    kwargs:
      default: lzw
  include_maskrcnn:
    short: ''
    long: include-maskrcnn
    help: Whether to include Mask R-CNN
    kwargs:
      action: store_true
  delete_dataset:
    short: ''
    long: delete-dataset
    help: Whether to delete the prediction dataset
    kwargs:
      action: store_true

train_transfer:
  placeholder:
    short: ''
    long: placeholder
    help: Help for placeholder

predict_transfer:
  placeholder:
    short: ''
    long: placeholder
    help: Help for placeholder